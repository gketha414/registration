@model PreRegistration.Models.ViewModels.PatientViewModel
@{
    ViewBag.Title = "LandingPage";
    //  Layout = @Model.GetLayout();
}
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js"
    integrity="sha256-yE5LLp5HSQ/z+hJeCqkz9hdjNkk1jaiGG0tDCraumnA="
    crossorigin="anonymous"></script>*@
@*<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <link rel="stylesheet" href="https://www.jqwidgets.com/public/jqwidgets/styles/jqx.base.css" type="text/css" />
    <link rel="stylesheet" href="https://www.jqwidgets.com/public/jqwidgets/styles/jqx.energyblue.css" type="text/css" />
    <script type="text/javascript" src="https://www.jqwidgets.com/public/jqwidgets/jqx-all.js"></script>
    <script type="text/javascript" src="https://www.jqwidgets.com/public/jqwidgets/globalization/globalize.js"></script>
    <link rel="stylesheet" href="https://www.jqwidgets.com/public/jqwidgets/styles/jqx.arctic.css" type="text/css" />*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/3.3.4/jquery.inputmask.bundle.min.js"></script>
<script src="https://unpkg.com/jquery-input-mask-phone-number@1.0.0/dist/jquery-input-mask-phone-number.js"></script>

<script src="~/Scripts/jquery.maskedinput.min.js"></script>
<script src="~/Scripts/jquery.maskssn.js"></script>
<input type="hidden" id="Url1" value="@Url.Action("submitPatientData", "PreRegistration")" />
<input type="hidden" id="Url2" value="@Url.Action("submitSpouseData", "PreRegistration")" />
<input type="hidden" id="Url3" value="@Url.Action("submitMinorData", "PreRegistration")" />
<input type="hidden" id="Url4" value="@Url.Action("submitEmergencyData", "PreRegistration")" />
<input type="hidden" id="Url5" value="@Url.Action("submitInsuranceData", "PreRegistration")" />
<input type="hidden" id="Url6" value="@Url.Action("submitAccidentData", "PreRegistration")" />

<script src="~/Scripts/Register/registration.js"></script>
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.min.js"></script>*@
@*<script src="https://raw.githubusercontent.com/digitalBush/jquery.maskedinput/master/src/jquery.maskedinput.js" type="text/javascript"></script>*@
<style>


    .maroonLists {
        color: maroon;
        font-weight: bold;
    }

    #submitted_filter {
        display: none;
    }

    .dataTables_length {
        margin: 10px !important;
    }

    a {
        font-weight: 600;
    }

    body {
        margin-top: 30px;
    }

    .stepwizard-step p {
        margin-top: 0px;
        color: #666;
    }

    .stepwizard-row {
        display: table-row;
    }

    .stepwizard {
        display: table;
        width: 100%;
        position: relative;
    }

    .stepwizard-step button[disabled] {
        /*opacity: 1 !important;
    filter: alpha(opacity=100) !important;*/
    }

    .stepwizard .btn.disabled, .stepwizard .btn[disabled], .stepwizard fieldset[disabled] .btn {
        opacity: 1 !important;
        color: #bbb;
    }

    .stepwizard-row:before {
        top: 14px;
        bottom: 0;
        position: absolute;
        content: " ";
        width: 100%;
        height: 1px;
        background-color: #ccc;
        z-index: 0;
    }

    .stepwizard-step {
        display: table-cell;
        text-align: center;
        position: relative;
    }

    .btn-circle {
        width: 30px;
        height: 30px;
        text-align: center;
        padding: 6px 0;
        font-size: 12px;
        line-height: 1.428571429;
        border-radius: 15px;
    }

    .btn1, .btn1-large {
        text-decoration: none;
        color: #fff;
        font-weight: 700 !important;
        font-style: normal !important;
        background-color: #2196f3;
        text-align: center;
        letter-spacing: .5px;
        transition: .2s ease-out;
        cursor: pointer;
    }

    .btn1, .btn1-large, .btn-floating, .btn1-large, .btn1-flat {
        font-size: 13px;
        outline: 0;
    }

    .btn1, .btn-large1, .btn1-flat {
        border: none;
        border-radius: 2px !important;
        display: inline-block;
        height: 28px !important;
        line-height: 28px !important;
        padding: 0 8px !important;
        text-transform: uppercase !important;
        vertical-align: middle !important;
        -webkit-tap-highlight-color: transparent;
    }

    .btn1, .btn1-large {
        min-width: 120px;
    }

    .col-xs-6_right {
        width: 45%;
        /*text-align: right;
        float: left;*/
        padding-right: 10px;
    }

    fieldset.group {
        margin: 0;
        padding: 0;
        margin-bottom: 1.25em;
        padding: .125em;
    }

        fieldset.group legend {
            margin: 0;
            padding: 0;
            font-weight: bold;
            margin-left: 20px;
            font-size: 100%;
            color: black;
        }

    .stepwizard-step a.disableButton {
        pointer-events: none;
        opacity: 0.5;
        cursor: not-allowed;
    }

    .stepwizard-step {
        pointer-events: auto;
        opacity: 1;
        cursor: pointer;
    }
</style>
<br />
<br />
<br />
<br />
@Html.HiddenFor(m => m.PatientDemographicsViewModel.Age)
<div class="container1">
    <div class="stepwizard">
        <div class="stepwizard-row setup-panel">
            <div class="stepwizard-step col-xs-1"></div>
            <div class="stepwizard-step col-xs-1"></div>

            <div class="stepwizard-step col-xs-1">
                <a href="#patient" type="button" id="patientStep" class="btn btn-success btn-circle">1</a>
                <p><small>Patient Information</small></p>
            </div>

            <div class="stepwizard-step col-xs-1">
                <a href="#spouse" type="button" id="spouseStep" class="btn btn-default btn-circle disableButton">2</a>
                <p><small>Spouse Information</small></p>
            </div>
            <div class="stepwizard-step col-xs-1" id="divMinorStep">
                <a href="#minor" type="button" id="minorStep" class="btn btn-default btn-circle disableButton">3</a>
                <p><small>Minor Information</small></p>
            </div>
            <div class="stepwizard-step col-xs-1">
                <a href="#emergency" type="button" id="emergencyStep" class="btn btn-default btn-circle disableButton">4</a>
                <p><small>Emergency Contact Information</small></p>
            </div>
            <div class="stepwizard-step col-xs-1">
                <a href="#insurance" type="button" id="insuranceStep" class="btn btn-default btn-circle disableButton">5</a>
                <p><small>Insurance Information</small></p>
            </div>
            <div class="stepwizard-step col-xs-1">
                <a href="#accident" type="button" id="accidentStep" class="btn btn-default btn-circle disableButton">6</a>
                <p><small>Accident Information</small></p>
            </div>
            <div class="stepwizard-step col-xs-1">
                <a href="#step7" type="button" id="verifyStep" class="btn btn-default btn-circle disableButton">7</a>
                <p><small>Verify Information</small></p>
            </div>
            <div class="stepwizard-step col-xs-1"></div>
            <div class="stepwizard-step col-xs-1"></div>
        </div>
    </div>

    <div role="form" id="myForm" enctype="multipart/form-data">
        @*//Patient Information1*@
        <form class="panel panel-primary setup-content" id="patient">
            <div class="panel-heading">
                <h3 class="panel-title">Patient Information</h3>
            </div>
            <div class="panel-body">
                @*<div class="form-group">*@
                <div class="row">
                    <div class="form-group col-md-4" id="divHospitalId">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.HospitalID, new { @class = "formScreeningInfo required control-label" })
                        @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.HospitalID, new SelectList(Model.Hospitals, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "hospitalId" })
                    </div>
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.In_Hospital_Directory, new { @class = "formScreeningInfo" })
                        <div>
                            @for (int i = 0; i < Model.YesNo.Count; i++)
                            {
                                <span>
                                    @Model.YesNo[i]
                                    @{
                                        bool value = Model.YesNo[i] == "Yes";
                                    }
                                    @Html.RadioButtonFor(m => m.PatientDemographicsViewModel.In_Hospital_Directory, value) &nbsp;
                                </span>
                            }
                        </div>
                    </div>
                    <div class="form-group col-lg-4" id="divHS">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.HospitalService, new { @class = "formScreeningInfo required" })
                        <div>
                            @for (int i = 0; i < Model.HospitalService.Count; i++)
                            {
                                <span>
                                    @Model.HospitalService[i]
                                    @Html.RadioButtonFor(m => m.PatientDemographicsViewModel.HospitalService, @Model.HospitalService[i]) &nbsp;
                                </span>
                            }
                        </div>
                        <div id="divHSOther" style="display:none">
                            @Html.TextBoxFor(m => m.PatientDemographicsViewModel.HospitalServiceOther, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                @*</div>*@
                <div class="row">

                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.PrimaryCarePhys, new { @class = "formScreeningInfo required" })
                        @Html.TextBoxFor(m => m.PatientDemographicsViewModel.PrimaryCarePhys, new { @class = "form-control requiredField", required = "required" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.AdmitDate, new { @class = "formScreeningInfo" })
                        @Html.EditorFor(m => m.PatientDemographicsViewModel.AdmitDate, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.PatientHereBefore, new { @class = "formScreeningInfo" })
                        <div>
                            @for (int i = 0; i < Model.YesNo.Count; i++)
                            {
                                <span>
                                    @Model.YesNo[i]
                                    @{
                                        bool value = Model.YesNo[i] == "Yes";
                                    }
                                    @Html.RadioButtonFor(m => m.PatientDemographicsViewModel.PatientHereBefore, value) &nbsp;
                                </span>
                            }
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.First_Name, new { @class = "formScreeningInfo required control-label" })
                        @Html.TextBoxFor(m => m.PatientDemographicsViewModel.First_Name, new { @class = "form-control requiredField", required = "required" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.Middle_Name, new { @class = "formScreeningInfo" })
                        @Html.EditorFor(m => m.PatientDemographicsViewModel.Middle_Name, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.Last_Name, new { @class = "formScreeningInfo required control-label" })
                        @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Last_Name, new { @class = "form-control requiredField", required = "required" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.Entitlement, new { @class = "formScreeningInfo" })
                        @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Entitlement, new { @class = "form-control requiredField" })
                    </div>
                    <div class="form-group col-lg-4" id="divGender">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.Gender, new { @class = "formScreeningInfo required" })
                        <div>
                            @for (int i = 0; i < Model.Gender.Count; i++)
                            {
                                <span>
                                    @Model.Gender[i]
                                    @Html.RadioButtonFor(m => m.PatientDemographicsViewModel.Gender, @Model.Gender[i]) &nbsp;
                                </span>
                            }
                        </div>
                    </div>
                    <div class="form-group col-lg-4" id="divCurrentGender">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.CurrentlyIdentifyAs, new { @class = "formScreeningInfo" })
                        @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.CurrentlyIdentifyAs, new SelectList(Model.CurrentlyIdentifyAs, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "currentlyIdentifyAs" })
                        @*<div>
                                @for (int i = 0; i < Model.CurrentlyIdentifyAs.Count; i++)
                                {
                                    <span>
                                        @Model.CurrentlyIdentifyAs[i]
                                        @Html.RadioButtonFor(m => m.PatientDemographicsViewModel.CurrentlyIdentifyAs, @Model.CurrentlyIdentifyAs[i]) &nbsp;
                                    </span>
                                }
                            </div>*@
                    </div>

                </div>

                <div class="row">
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.BirthDate, new { @class = "formScreeningInfo required" })
                        @Html.EditorFor(m => m.PatientDemographicsViewModel.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                    </div>

                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.Marital_Status, new { @class = "formScreeningInfo required control-label" })
                        @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.Marital_Status, new SelectList(Model.MaritalStatus, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "maritalstatus" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.SSN, new { @class = "formScreeningInfo control-label" })
                        @Html.TextBoxFor(m => m.PatientDemographicsViewModel.SSN, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 999-99-9999)" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.Race, new { @class = "formScreeningInfo required control-label" })
                        @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.Race, new SelectList(Model.Race, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "race" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.PatientDemographicsViewModel.Ethincity, new { @class = "formScreeningInfo required control-label" })
                        @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.Ethincity, new SelectList(Model.Ethincities, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "ethincity" })
                    </div>
                </div>


                <fieldset class="scheduler-border">
                    <legend class="scheduler-border">Permanent Street Address</legend>
                    <div class="control-group">
                        <div class="controls">
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Address1, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Address1, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Address2, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Address2, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.City, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.City, new { @class = "form-control requiredField" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.StateProvince, new { @class = "formScreeningInfo control-label" })
                                    @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.StateProvince, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "patientstate" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.ZipCode, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.ZipCode, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>


                <fieldset class="scheduler-border">
                    <legend class="scheduler-border">Contact Info</legend>
                    <div class="control-group">
                        <div class="controls">
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Home_Phone, new { @class = "formScreeningInfo control-label required" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Home_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                </div>
                                @*<div class="form-group col-md-3">
                                        @Html.LabelFor(m => m.PatientDemographicsViewModel.Cell_Phone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Cell_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>*@
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Email_Address, new { @class = "formScreeningInfo control-label required" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Email_Address, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Church_Choice, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Church_Choice, new { @class = "form-control requiredField" })
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <fieldset class="scheduler-border">
                    <legend class="scheduler-border">Guarantor Required</legend>
                    <div class="control-group">
                        <div class="controls">
                            <div class="row">
                                <div class="form-group col-lg-6" id="PatientDemographics">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.ResponsiblePartyID, new { @class = "formScreeningInfo required" })
                                    @Html.DropDownListFor(
                                        m => m.PatientDemographicsViewModel.ResponsiblePartyID, // Bind to ResponsiblePartyID
                                        new SelectList(Model.Guarantors, "Value", "Text"),
                                        htmlAttributes: new { @class = "form-control", id = "guarantor" }
                                    )
                                </div>
                                @*<div class="form-group col-lg-6" id="PatientDemographics">
                                        @Html.LabelFor(m => m.PatientDemographicsViewModel.ResponsiblePartyID, new { @class = "formScreeningInfo required" })
                                        @Html.DropDownListFor(x => Model.Guarantors, new SelectList(Model.Guarantors, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "guarantor" })
                                        <div>
                                                @for (int i = 0; i < Model.Guarantors.Count; i++)
                                                {
                                                    <span>
                                                        @Model.Guarantors[i].Text
                                                        @Html.RadioButtonFor(m => m.PatientDemographicsViewModel.ResponsiblePartyID, @Model.Guarantors[i].Value) &nbsp;
                                                    </span>
                                                }
                                            </div>
                                    </div>*@
                                <div class="form-group col-md-6" id="divGuarNameIfOther" style="display:none">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.GuarNameIfOther, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.GuarNameIfOther, new { @class = "form-control requiredField" })
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <fieldset class="scheduler-border">
                    <legend class="scheduler-border">Patient Billing Address</legend>
                    <div class="control-group">
                        <div class="controls">
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Bill_Address1, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Bill_Address1, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Bill_Address2, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Bill_Address2, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Bill_City, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Bill_City, new { @class = "form-control requiredField" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Bill_State, new { @class = "formScreeningInfo control-label" })
                                    @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.Bill_State, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "patientbillstate" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Bill_ZipCode, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Bill_ZipCode, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <fieldset class="scheduler-border">
                    <legend class="scheduler-border">Patient Mailing Address</legend>
                    <div class="control-group">
                        <div class="controls">
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Mailing_Address1, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Mailing_Address1, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Mailing_Address2, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Mailing_Address2, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.MailingCity, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.MailingCity, new { @class = "form-control requiredField" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.MailingState, new { @class = "formScreeningInfo control-label" })
                                    @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.MailingState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "patientmailstate" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.MailingZip, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.MailingZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <fieldset class="scheduler-border">
                    <legend class="scheduler-border">Patient 911 Address</legend>
                    <div class="control-group">
                        <div class="controls">
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.E911Address1, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.E911Address1, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.E911Address2, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.E911Address2, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.E911City, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.E911City, new { @class = "form-control requiredField" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.E911State, new { @class = "formScreeningInfo control-label" })
                                    @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.E911State, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "patient911state" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.E911Zip, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.E911Zip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <fieldset class="scheduler-border">
                    <legend class="scheduler-border">Patient Employer Section</legend>
                    <div class="control-group">
                        <div class="controls">
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Employer, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Employer, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.Job_Title, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.Job_Title, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.EmployerPhone, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.EmployerPhone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.EmployerAddress1, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.EmployerAddress1, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.EmployerAddress2, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.EmployerAddress2, new { @class = "form-control requiredField" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.EmployerCity, new { @class = "formScreeningInfo control-label" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.EmployerCity, new { @class = "form-control requiredField" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.EmployerState, new { @class = "formScreeningInfo control-label" })
                                    @Html.DropDownListFor(x => Model.PatientDemographicsViewModel.EmployerState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "patientempstate" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.PatientDemographicsViewModel.EmployerZip, new { @class = "formScreeningInfo" })
                                    @Html.TextBoxFor(m => m.PatientDemographicsViewModel.EmployerZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <div class="row">
                    <div class="col-xs-12">
                        <div id="step1Errors" style="color: red; font-weight: bold;">

                        </div>
                    </div>
                    <div class="alert alert-danger" style="display:none" id="errorAlert">
                        <strong>Something went wrong!</strong> Your record was not able to save.
                        <div id="ErrorMessage"></div>
                    </div>
                </div>

                @*<div class="form-group">
                        <label class="control-label">Last Name</label>
                        <input maxlength="100" type="text" required="required" class="form-control" placeholder="Enter Last Name" />
                    </div>*@
                <button class="btn1 btn-lg nextBtn pull-right" type="button" id="patientStep" onclick="onPatientClick()">Next</button>
            </div>
        </form>
        @*//Spuse information*@
        <form class="panel panel-primary setup-content" id="spouse">
            <div class="panel-heading">
                <h3 class="panel-title">Spouse Information</h3>
            </div>
            <div class="panel-body">

                <div class="row">
                    <div class="form-group col-md-4">
                    </div>
                    <div class="form-group col-lg-4">
                        @Html.CheckBoxFor(m => m.SpouseInformation.SpouseSkip, new { id = "notmarried" })
                        &nbsp;<label for="notmarried">Not Applicable - Click Here If You Are Not Married</label>
                    </div>
                </div>
                <div id="divSpouse" style="display:block">
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.First_Name, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.SpouseInformation.First_Name, new { @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.Middle_Name, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.SpouseInformation.Middle_Name, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.Last_Name, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.SpouseInformation.Last_Name, new { @class = "form-control requiredField", required = "required" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.BirthDate, new { @class = "formScreeningInfo required" })
                            @Html.EditorFor(m => m.SpouseInformation.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.Race, new { @class = "formScreeningInfo required control-label" })
                            @Html.DropDownListFor(x => Model.SpouseInformation.Race, new SelectList(Model.Race, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "spouse-race" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.Marital_Status, new { @class = "formScreeningInfo control-label" })
                            @Html.DropDownListFor(x => Model.SpouseInformation.Marital_Status, new SelectList(Model.MaritalStatus, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "spouse-status" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.SSN, new { @class = "formScreeningInfo control-label" })
                            @Html.TextBoxFor(m => m.SpouseInformation.SSN, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 999-99-9999)" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.Home_Phone, new { @class = "formScreeningInfo control-label required" })
                            @Html.TextBoxFor(m => m.SpouseInformation.Home_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.SpouseInformation.Cell_Phone, new { @class = "formScreeningInfo" })
                            @Html.TextBoxFor(m => m.SpouseInformation.Cell_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                        </div>
                    </div>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Permanent Street Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.Address1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.Address1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.Address2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.Address2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.City, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.City, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.StateProvince, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.SpouseInformation.StateProvince, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "spousestate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.ZipCode, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.ZipCode, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Spouse Employer Section</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.Employer, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.Employer, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.Job_Title, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.Job_Title, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.Employer_Phone, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.Employer_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.EmployerAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.EmployerAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.EmployerAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.EmployerAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.EmployerCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.EmployerCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.EmployerState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.SpouseInformation.EmployerState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "spouseempstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.SpouseInformation.EmployerZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.SpouseInformation.EmployerZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                    <div class="row">
                        <div class="col-xs-12">
                            <div id="spouseErrors" style="color: red; font-weight: bold;">

                            </div>
                        </div>
                        <div class="alert alert-danger" style="display:none" id="errorAlert">
                            <strong>Something went wrong!</strong> Your record was not able to save.
                            <div id="ErrorMessage"></div>
                        </div>
                    </div>
                </div>
                <button class="btn1 btn-primary nextBtn pull-right" onclick="onSpouseClick()" type="button">Next</button>
            </div>
        </form>

        <form class="panel panel-primary setup-content" id="minor">
            <div class="panel-heading">
                <h3 class="panel-title">Minor Information - Complete This Section Only If Patient Is A Minor</h3>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="form-group col-md-4">
                    </div>
                    <div class="form-group col-lg-6">
                        @Html.CheckBoxFor(m => m.MinorInformation.MinorSKip, new { id = "notMinor" })
                        &nbsp;<label for="notMinor">Not Applicable - Click Here If Patient Is Not A Minor</label>
                    </div>
                </div>
                <div class="row">
                    @*<div class="form-group col-md-4">
                        </div>*@
                    <div class="form-group col-lg-6" style="display:block" id="chooseGurantor">

                        <label class="formScreeningInfo" for="MinorInformation_ResponsiblePartyID">Choose Guarantor to complete this section?</label>
                        @Html.DropDownListFor(m => m.MinorInformation.MontherMinorInformation.ResponsiblePartyID,
                            new SelectList(Model.FilteredGuarantors, "Value", "Text"),
                            htmlAttributes: new { @class = "form-control", id = "choosegurantor", onchange = "onResponsiblePartyChange()" })

                        @Html.HiddenFor(m => m.MinorInformation.MontherMinorInformation.ResponsiblePartyID)
                    </div>
                </div>
                <div id="divMinorMother" style="display:none">
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor:  Mother Section</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.First_Name, new { @class = "formScreeningInfo required control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.First_Name, new { @class = "form-control requiredField", required = "required" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Middle_Init, new { @class = "formScreeningInfo" })
                                        @Html.EditorFor(m => m.MinorInformation.MontherMinorInformation.Middle_Init, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Last_Name, new { @class = "formScreeningInfo required control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.Last_Name, new { @class = "form-control requiredField", required = "required" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Race, new { @class = "formScreeningInfo required control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.MontherMinorInformation.Race, new SelectList(Model.Race, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minor-mother-race" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Dob, new { @class = "formScreeningInfo required" })
                                        @Html.EditorFor(m => m.MinorInformation.MontherMinorInformation.Dob, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Marital_Status, new { @class = "formScreeningInfo required control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.MontherMinorInformation.Marital_Status, new SelectList(Model.MaritalStatus, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minor-mother-marital-status" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.HomePhone, new { @class = "formScreeningInfo control-label required" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.HomePhone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Cell_Phone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.Cell_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Permanent Street Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Address1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.Address1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Address2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.Address2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.City, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.City, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.StateProvince, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.MontherMinorInformation.StateProvince, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minormotherstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.ZipCode, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.ZipCode, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor: Mother Billing Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.BillAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.BillAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.BillAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.BillAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.BillCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.BillCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.BillState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.MontherMinorInformation.BillState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minormothebillstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.BillZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.BillZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor: Mother Mailing Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.MailAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.MailAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.MailAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.MailAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.MailCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.MailCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.MailState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.MontherMinorInformation.MailState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minormothermailstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.MailZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.MailZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor: Mother 911 Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.E911Address1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.E911Address1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.E911Address2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.E911Address2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.E911City, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.E911City, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.E911State, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.MontherMinorInformation.E911State, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minormothere911state" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.E911Zip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.E911Zip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor: Mother Employer Section</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Employer, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.Employer, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.Job_Title, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.Job_Title, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.EmployerPhone, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.EmployerPhone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.EmployerAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.EmployerAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.EmployerAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.EmployerAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.EmployerCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.EmployerCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.EmployerState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.MontherMinorInformation.EmployerState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minormothempstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.MontherMinorInformation.EmployerZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.MontherMinorInformation.EmployerZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    @*<div class="row">
                            <div class="col-xs-12">
                                <div id="minorErrors" style="color: red; font-weight: bold;">

                                </div>
                            </div>
                            <div class="alert alert-danger" style="display:none" id="errorAlert">
                                <strong>Something went wrong!</strong> Your record was not able to save.
                                <div id="ErrorMessage"></div>
                            </div>
                        </div>*@
                </div>

                <div id="divMinorFather" style="display:none">
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor:  Father Section</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.First_Name, new { @class = "formScreeningInfo required control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.First_Name, new { @class = "form-control requiredField", required = "required" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Middle_Init, new { @class = "formScreeningInfo" })
                                        @Html.EditorFor(m => m.MinorInformation.FatherMinorInformation.Middle_Init, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Last_Name, new { @class = "formScreeningInfo required control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.Last_Name, new { @class = "form-control requiredField", required = "required" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Race, new { @class = "formScreeningInfo required control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.FatherMinorInformation.Race, new SelectList(Model.Race, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minor-father-race" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Dob, new { @class = "formScreeningInfo required" })
                                        @Html.EditorFor(m => m.MinorInformation.FatherMinorInformation.Dob, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Marital_Status, new { @class = "formScreeningInfo required control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.FatherMinorInformation.Marital_Status, new SelectList(Model.MaritalStatus, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minor-father-marital-status" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.HomePhone, new { @class = "formScreeningInfo control-label required" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.HomePhone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Cell_Phone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.Cell_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Permanent Street Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Address1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.Address1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Address2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.Address2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.City, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.City, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.StateProvince, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.FatherMinorInformation.StateProvince, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minorfatherstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.ZipCode, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.ZipCode, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor: Father Billing Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.BillAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.BillAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.BillAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.BillAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.BillCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.BillCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.BillState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.FatherMinorInformation.BillState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minormotherbillstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.BillZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.BillZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor: Father Mailing Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.MailAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.MailAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.MailAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.MailAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.MailCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.MailCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.MailState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.FatherMinorInformation.MailState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minorfathermailstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.MailZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.MailZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor: Father 911 Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.E911Address1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.E911Address1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.E911Address2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.E911Address2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.E911City, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.E911City, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.E911State, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.FatherMinorInformation.E911State, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minorfather911state" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.E911Zip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.E911Zip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Minor: Father Employer Section</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Employer, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.Employer, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.Job_Title, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.Job_Title, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.EmployerPhone, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.EmployerPhone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.EmployerAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.EmployerAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.EmployerAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.EmployerAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.EmployerCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.EmployerCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.EmployerState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.MinorInformation.FatherMinorInformation.EmployerState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "minorfatherempstate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.MinorInformation.FatherMinorInformation.EmployerZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.MinorInformation.FatherMinorInformation.EmployerZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                </div>
                <div class="row">
                    <div class="col-xs-12">
                        <div id="minorErrors" style="color: red; font-weight: bold;">

                        </div>
                    </div>
                    <div class="alert alert-danger" style="display:none" id="errorAlert">
                        <strong>Something went wrong!</strong> Your record was not able to save.
                        <div id="ErrorMessage"></div>
                    </div>
                </div>
                <button class="btn1 btn-primary nextBtn pull-right" onclick="onMinorClick()" type="button">Next</button>
            </div>
        </form>

        <form class="panel panel-primary setup-content" id="emergency">
            <div class="panel-heading">
                <h3 class="panel-title">Emergency Contact Information</h3>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="form-group col-md-4">
                    </div>
                    <div class="form-group col-lg-6">
                        @Html.CheckBoxFor(m => m.EmergencyContact.EmergencySkip, new { id = "chkEmergecny" })
                        &nbsp;<label for="chkEmergecny">Check This Box If You Do Not Have An Emergency Contact</label>
                    </div>

                </div>

                <div class="row" id="divSpouseEmergency">
                    <div class="form-group col-lg-6">
                        <input data-val="true" id="spouseemergency" name="spouseemergency" type="checkbox">
                        &nbsp;<label for="AllExceptions_Permissible">Do you want to have your spouse as an emergency contact?</label>
                    </div>
                </div>

                <div id="divEmergencyOne">
                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(m => m.EmergencyContact.EmergencyContactOne.Nearest_Relative_Name, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactOne.Nearest_Relative_Name, new { @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(m => m.EmergencyContact.EmergencyContactOne.Relationship, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.EmergencyContact.EmergencyContactOne.Relationship, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Permanent Street Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactOne.Address1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactOne.Address1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactOne.Address2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactOne.Address2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactOne.City, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactOne.City, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactOne.StateProvince, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.EmergencyContact.EmergencyContactOne.StateProvince, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "emergencycontactonestate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactOne.ZipCode, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactOne.ZipCode, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactOne.Contact_Phone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactOne.Contact_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
                <br />
                <div id="divEmergencyTwo" style="display:none">
                    <div class="panel-heading" style="background: #337ab7; height: 44px; margin-bottom: 50px; align-items: center">

                        <span class="CloseIconExtraBtn  nextBtn pull-right" onclick="resetFormFields('divEmergencyTwo')" style=""><img style="height:25px; width:25px; background:white;" src="~/images/closeIcon.png" /></span>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(m => m.EmergencyContact.EmergencyContactTwo.Nearest_Relative_Name, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactTwo.Nearest_Relative_Name, new { @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(m => m.EmergencyContact.EmergencyContactTwo.Relationship, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.EmergencyContact.EmergencyContactTwo.Relationship, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Permanent Street Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactTwo.Address1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactTwo.Address1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactTwo.Address2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactTwo.Address2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactTwo.City, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactTwo.City, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactTwo.StateProvince, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.EmergencyContact.EmergencyContactTwo.StateProvince, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "emergencycontact2state" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactTwo.ZipCode, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactTwo.ZipCode, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactTwo.Contact_Phone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactTwo.Contact_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
                <br />
                <div id="divEmergencyThree" style="display:none">

                    <div class="panel-heading" style="background: #337ab7; height: 44px; margin-bottom: 50px; align-items: center">

                        <span class="CloseIconExtraBtn  nextBtn pull-right" onclick="resetFormFields('divEmergencyThree')" style=""><img style="height:25px; width:25px; background:white;" src="~/images/closeIcon.png" /></span>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(m => m.EmergencyContact.EmergencyContactThree.Nearest_Relative_Name, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactThree.Nearest_Relative_Name, new { @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(m => m.EmergencyContact.EmergencyContactThree.Relationship, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.EmergencyContact.EmergencyContactThree.Relationship, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Permanent Street Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactThree.Address1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactThree.Address1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactThree.Address2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactThree.Address2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactThree.City, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactThree.City, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactThree.StateProvince, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.EmergencyContact.EmergencyContactThree.StateProvince, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "emergencycontate3state" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactThree.ZipCode, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactThree.ZipCode, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.EmergencyContact.EmergencyContactThree.Contact_Phone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.EmergencyContact.EmergencyContactThree.Contact_Phone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
                <button class="btn1 btn-primary nextBtn" onclick="AddEmergencyCont()" id="EmergencyAddBtn" type="button">Add</button>
                <div class="row">
                    <div class="col-xs-12">
                        <div id="emergencyErrors" style="color: red; font-weight: bold;">

                        </div>
                    </div>
                    <div class="alert alert-danger" style="display:none" id="errorAlert">
                        <strong>Something went wrong!</strong> Your record was not able to save.
                        <div id="ErrorMessages"></div>
                    </div>
                </div>
                <button class="btn1 btn-primary nextBtn pull-right" onclick="onEmergencyClick()" type="button">Next</button>

            </div>
        </form>

        <form class="panel panel-primary setup-content" id="insurance">
            <div class="panel-heading">
                <h3 class="panel-title">Insurance Information</h3>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="form-group col-md-4">
                    </div>
                    <div class="form-group col-lg-6">
                        @Html.CheckBoxFor(m => m.InsuranceInformation.InsuranceSkip, new { id = "insuranceCheckBox" })
                        &nbsp;<label for="insuranceCheckBox">Check This Box If You Do Not Have Health Insurance</label>
                    </div>
                </div>
                <div id="InsuranceOnePremium">
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.InsRank, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceOne.InsRank, new { @type = "number", @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.InsPlanName, new { @class = "formScreeningInfo required" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceOne.InsPlanName, new { htmlAttributes = new { @class = "form-control requiredField", required = "required" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.Subscriber_Name, new { @class = "formScreeningInfo required" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceOne.Subscriber_Name, new { htmlAttributes = new { @class = "form-control requiredField", required = "required" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.Policy_Number, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceOne.Policy_Number, new { @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.Group_Number, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceOne.Group_Number, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.PlanCode, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceOne.PlanCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Insurance Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.InsAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceOne.InsAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.InsAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceOne.InsAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.InsCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceOne.InsCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.InsState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.InsuranceInformation.InsuranceOne.InsState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "instate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.InsZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceOne.InsZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.InsPhone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceOne.InsPhone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Attachments</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-6">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceOne.AttachmentType, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.InsuranceInformation.InsuranceOne.AttachmentType, new SelectList(Model.AttachmentTypes, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "attachmentId" })

                                    </div>
                                    <div class="form-group col-md-6">
                                        <label class="formScreeningInfo control-label" for="InsuranceInformation_AttachmentType">Upload</label>
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <span class="btn btn-primary btn-file">
                                                    <input id="fileInput" type="file" style="width:400px">
                                                    <input name="InsuranceInformation.InsuranceOne.Attachment" id="Attachment-11" type="hidden" />
                                                    @*@Html.TextBoxFor(m => m.InsuranceInformation.InsuranceOne.Attachment, new { type = "file" })*@
                                                </span>
                                            </span>
                                            <input type="submit" value="Upload file" data-atta="Attachment-11" id="attachFile" class="btn1 btn-primary" style="float: left;" data-loading-text="<i class='fa fa-spinner fa-spin '></i> Processing" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-sm-12">
                                            <div id="attached" style="color: red; font-weight: bold;"> <br /></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <table class="table table-hover dataTable box-shadow--8dp" style="background-color:#add8e6" id="uploads">
                                    <thead>
                                        <tr>
                                            <th>Id</th>
                                            <th>File Name</th>
                                            <th>Remove</th>
                                        </tr>
                                    </thead>
                                    <tbody style="font-weight: bold;"></tbody>
                                </table>
                            </div>
                        </div>
                    </fieldset>


                </div>
                <div id="InsuranceTwoPremium" style="display:none">

                    <div class="panel-heading" style="background: #337ab7; height: 44px; margin-bottom: 50px; align-items: center">

                        <span class="CloseIconExtraBtn nextBtn pull-right" onclick="resetInsurancePremium('InsuranceTwoPremium')" style=""><img style="height:25px; width:25px; background:white;" src="~/images/closeIcon.png" /></span>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.InsRank, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceTwo.InsRank, new { @type = "number", @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.InsPlanName, new { @class = "formScreeningInfo required control-label" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceTwo.InsPlanName, new { htmlAttributes = new { @class = "form-control requiredField", required = "required" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.Subscriber_Name, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceTwo.Subscriber_Name, new { htmlAttributes = new { @class = "form-control requiredField", required = "required" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.Policy_Number, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceTwo.Policy_Number, new { @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.Group_Number, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceTwo.Group_Number, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.PlanCode, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceTwo.PlanCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Insurance Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.InsAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceTwo.InsAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.InsAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceTwo.InsAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.InsCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceTwo.InsCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.InsState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.InsuranceInformation.InsuranceTwo.InsState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "instate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.InsZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceTwo.InsZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.InsPhone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceTwo.InsPhone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Attachments</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-6">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceTwo.AttachmentType, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.InsuranceInformation.InsuranceTwo.AttachmentType, new SelectList(Model.AttachmentTypes, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "attachmentId" })

                                    </div>
                                    <div class="form-group col-md-6">
                                        <label class="formScreeningInfo control-label" for="InsuranceInformation_AttachmentType">Upload</label>
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <span class="btn btn-primary btn-file">
                                                    <input id="fileInput" type="file" style="width:400px">
                                                    <input name="InsuranceInformation.InsuranceTwo.Attachment" id="Attachment-22" type="hidden" />
                                                </span>
                                            </span>
                                            <input type="submit" value="Upload file" data-atta="Attachment-22" id="attachFile" class="btn1 btn-primary" style="float: left;" data-loading-text="<i class='fa fa-spinner fa-spin '></i> Processing" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-sm-12">
                                            <div id="attached" style="color: red; font-weight: bold;"> <br /></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <table class="table table-hover dataTable box-shadow--8dp" style="background-color:#add8e6" id="uploads">
                                    <thead>
                                        <tr>
                                            <th>Id</th>
                                            <th>File Name</th>
                                            <th>Remove</th>
                                        </tr>
                                    </thead>
                                    <tbody style="font-weight: bold;"></tbody>
                                </table>
                            </div>
                        </div>
                    </fieldset>


                </div>
                <div id="InsuranceThreePremium" style="display:none">

                    <div class="panel-heading" style="background: #337ab7;height:44px; margin-bottom:50px;align-items:center">

                        <span class="CloseIconExtraBtn nextBtn pull-right" onclick="resetInsurancePremium('InsuranceThreePremium')" style=""><img style="height:25px; width:25px; background:white;" src="~/images/closeIcon.png" /></span>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.InsRank, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceThree.InsRank, new { @type = "number", @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.InsPlanName, new { @class = "formScreeningInfo required" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceThree.InsPlanName, new { htmlAttributes = new { @class = "form-control requiredField", required = "required" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.Subscriber_Name, new { @class = "formScreeningInfo required" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceThree.Subscriber_Name, new { htmlAttributes = new { @class = "form-control requiredField", required = "required" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.Policy_Number, new { @class = "formScreeningInfo required control-label" })
                            @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceThree.Policy_Number, new { @class = "form-control requiredField", required = "required" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.Group_Number, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceThree.Group_Number, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.PlanCode, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.InsuranceInformation.InsuranceThree.PlanCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Insurance Address</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.InsAddress1, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceThree.InsAddress1, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.InsAddress2, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceThree.InsAddress2, new { @class = "form-control requiredField" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.InsCity, new { @class = "formScreeningInfo control-label" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceThree.InsCity, new { @class = "form-control requiredField" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.InsState, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.InsuranceInformation.InsuranceThree.InsState, new SelectList(Model.States, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "instate" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.InsZip, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceThree.InsZip, new { @class = "form-control requiredField", @placeholder = "(Entry Format: 99999-9999, or 99999 and leave 4 digit zip code extension blank)" })
                                    </div>
                                    <div class="form-group col-md-4">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.InsPhone, new { @class = "formScreeningInfo" })
                                        @Html.TextBoxFor(m => m.InsuranceInformation.InsuranceThree.InsPhone, new { @class = "form-control requiredField", @placeholder = "(Enter Area Code, Exchange & Number)" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Attachments</legend>
                        <div class="control-group">
                            <div class="controls">
                                <div class="row">
                                    <div class="form-group col-md-6">
                                        @Html.LabelFor(m => m.InsuranceInformation.InsuranceThree.AttachmentType, new { @class = "formScreeningInfo control-label" })
                                        @Html.DropDownListFor(x => Model.InsuranceInformation.InsuranceThree.AttachmentType, new SelectList(Model.AttachmentTypes, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "attachmentId" })

                                    </div>
                                    <div class="form-group col-md-6">
                                        <label class="formScreeningInfo control-label" for="InsuranceInformation_AttachmentType">Upload</label>
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <span class="btn btn-primary btn-file">
                                                    <input id="fileInput" type="file" style="width:400px">
                                                    <input name="InsuranceInformation.InsuranceThree.Attachment" id="Attachment-33" type="hidden" />
                                                </span>
                                            </span>
                                            <input type="submit" value="Upload file" data-atta="Attachment-33" id="attachFile" class="btn1 btn-primary" style="float: left;" data-loading-text="<i class='fa fa-spinner fa-spin '></i> Processing" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-sm-12">
                                            <div id="attached" style="color: red; font-weight: bold;"> <br /></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <table class="table table-hover dataTable box-shadow--8dp" style="background-color:#add8e6" id="uploads">
                                    <thead>
                                        <tr>
                                            <th>Id</th>
                                            <th>File Name</th>
                                            <th>Remove</th>
                                        </tr>
                                    </thead>
                                    <tbody style="font-weight: bold;"></tbody>
                                </table>
                            </div>
                        </div>
                    </fieldset>


                </div>
                <button class="btn1 btn-primary nextBtn" onclick="AddInsuranceCont()" id="EmergencyAddBtn" type="button">Add</button>

                <div class="row">
                    <div class="col-xs-12">
                        <div id="insuranceErrors" style="color: red; font-weight: bold;">

                        </div>
                    </div>
                    <div class="alert alert-danger" style="display:none" id="errorAlert">
                        <strong>Something went wrong!</strong> Your record was not able to save.
                        <div id="ErrorMessages"></div>
                    </div>
                </div>
                <button class="btn1 btn-primary nextBtn pull-right" onclick="onInsuranceClick()" type="button">Next</button>

            </div>
        </form>

        <form class="panel panel-primary setup-content" id="accident">
            <div class="panel-heading">
                <h3 class="panel-title">Accident Information</h3>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="form-group col-md-4">
                    </div>
                    <div class="form-group col-lg-6">
                        @Html.CheckBoxFor(m => m.AccidentDetail.AccidentSkip, new { id = "AccidentCheckBox" })
                        &nbsp;<label for="insuranceCheckBox">Not Related To Accident</label>
                    </div>
                </div>
                <div id="AccidentBody">
                    <div class="row">
                        <div class="form-group col-lg-12" id="divac">
                            @Html.LabelFor(m => m.AccidentDetail.AccidentTypeID, new { @class = "formScreeningInfo required" })
                            <div>
                                @foreach (var accidentType in Model.AccidentTypes)
                                {
                                    <span>
                                        @accidentType.Value
                                        @Html.RadioButtonFor(m => m.AccidentDetail.AccidentTypeID, accidentType.Key) &nbsp;
                                    </span>
                                }
                            </div>
                        </div>
                    </div>





                    <div class="row">
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.AccidentDetail.DateOfAccident, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.AccidentDetail.DateOfAccident, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.AccidentDetail.TimeOfAccident, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.AccidentDetail.TimeOfAccident, new { htmlAttributes = new { @class = "form-control", @type = "time" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(m => m.AccidentDetail.Location, new { @class = "formScreeningInfo" })
                            @Html.EditorFor(m => m.AccidentDetail.Location, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-12">
                            <div id="accidentErrors" style="color: red; font-weight: bold;">

                            </div>
                        </div>
                        <div class="alert alert-danger" style="display:none" id="errorAlert">
                            <strong>Something went wrong!</strong> Your record was not able to save.
                            <div id="ErrorMessages"></div>
                        </div>
                    </div>
                </div>
                <button class="btn1 btn-primary nextBtn pull-right" onclick="onAccidentClick()" type="button">Next</button>
            </div>
        </form>


        <div class="panel panel-primary setup-content" id="step7">

            <div class="panel-heading">
                <h3 class="panel-title">Verify Patient Information</h3>
            </div>
            <div class="panel-body">
                <div id="PatientSection">

                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>First Name:</label>
                            <span id="firstName"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Last Name:</label>
                            <span id="lastName"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Gender Identity:</label>
                            <span id="BirthGender"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>Date of Birth:</label>
                            <span id="dateOfBirth"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Ethnicity:</label>
                            <span id="ethnicityValue"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Race:</label>
                            <span id="raceValue"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>Marital Status:</label>
                            <span id="maritalStatusValue"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Preferred Phone Number:</label>
                            <span id="preferredPhone"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Email Address:</label>
                            <span id="emailAddress"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>Primary Care Provider:</label>
                            <span id="primaryCareProvider"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Service Location:</label>
                            <span id="serviceLocation"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Registered Service:</label>
                            <span id="RegisteerService"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>Guarantor:</label>
                            <span id="guarantorValue"></span>
                        </div>
                    </div>

                    <!-- Continue for other fields as needed... -->

                    <div class="row">
                        <div class="form-group col-md-12">
                            <button class="btn btn-primary pull-right" type="button" onclick="EditInformation(1)">Edit Information</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-heading">
                <h3>spouse Information</h3>
            </div>
            <div class="panel-body">
                <div id="spouse-Section">


                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>First Name:</label>
                            <span id="spouseFirstName"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Last Name:</label>
                            <span id="spouseLastName"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Birth Date:</label>
                            <span id="spouseBirthDate"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>Race:</label>
                            <span id="spouseRace"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Home Phone:</label>
                            <span id="spouseHomePhone"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-12">
                        <button class="btn btn-primary pull-right" type="button" onclick="EditInformation(2)">Edit Information</button>
                    </div>

                </div>
            </div>

            <div class="panel-heading">
                <h3>Minor Information</h3>
            </div>
            <div class="panel-body">
                <div id="minor-Section">
                    <div id="FatherSection">
                        <center> <h3 style="font-weight:bold;">Father Information</h3></center>
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>Father First Name:</label>
                                <span id="fatherFirstName"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Father Last Name:</label>
                                <span id="fatherLastName"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Father Birth Date:</label>
                                <span id="fatherBirthDate"></span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>Father Race:</label>
                                <span id="fatherRace"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Father Home Phone:</label>
                                <span id="fatherHomePhone"></span>
                            </div>
                        </div>
                    </div>
                    <div id="MotherSection">

                        <center> <h3 style="font-weight:bold;">Mother Information</h3></center>

                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>Mother First Name:</label>
                                <span id="motherFirstName"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Mother Last Name:</label>
                                <span id="motherLastName"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Mother Birth Date:</label>
                                <span id="motherBirthDate"></span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>Mother Race:</label>
                                <span id="motherRace"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Mother Home Phone:</label>
                                <span id="motherHomePhone"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-12">
                        <button class="btn btn-primary pull-right" type="button" onclick="EditInformation(3)">Edit Information</button>
                    </div>

                </div>
            </div>
            <div class="panel-heading">
                <h3>Emergency Contact Information</h3>
            </div>
            <div class="panel-body">
                <div id="emergency-section">
                    <div id="emergency-Section1">
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>Nearest Relative Name:</label>
                                <span id="EmergencyNearestRelativeName"></span>
                            </div>
                        </div>
                    </div>
                    <div id="emergencySection2" style="display:none">
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>Nearest Relative Name:</label>
                                <span id="EmergencyNearestRelativeName2"></span>
                            </div>
                        </div>
                    </div>
                    <div id="emergencySection3" style="display:none">
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>Nearest Relative Name:</label>
                                <span id="EmergencyNearestRelativeName3"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-12">
                        <button class="btn btn-primary pull-right" type="button" onclick="EditInformation(4)">Edit Information</button>
                    </div>
                </div>

            </div>

            <div class="panel-heading">
                <h3>Insurance Information</h3>
            </div>

            <div class="panel-body">
                <div id="insurance-section">
                    <div id="insurance-section1">
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>InsRank:</label>
                                <span id="insuranceInsRank1"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Policy Number:</label>
                                <span id="insurancePolicyNumber1"></span>
                            </div>
                        </div>
                    </div>
                    <div id="insurance-section2" style="display:none">
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>InsRank:</label>
                                <span id="insuranceInsRank2"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Policy Number:</label>
                                <span id="insurancePolicyNumber2"></span>
                            </div>
                        </div>
                    </div>
                    <div id="insurance-section3" style="display:none">
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>InsRank:</label>
                                <span id="insuranceInsRank3"></span>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Policy Number:</label>
                                <span id="insurancePolicyNumber3"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-12">
                        <button class="btn btn-primary pull-right" type="button" onclick="EditInformation(5)">Edit Information</button>
                    </div>
                </div>


            </div>

            <div class="panel-heading">
                <h3>Accident Information</h3>
            </div>
            <div class="panel-body">

                <div class="row">
                    <div class="form-group col-md-4">
                        <label>Accident Type:</label>
                        <span id="AccidentType"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label>Insurance Rank:</label>
                        <span id="AccidentInsuranceRank"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label>Policy Number:</label>
                        <span id="AccidentPolicyNumber"></span>
                    </div>



                </div>
                <div class="row">
                    <div class="form-group col-md-12">
                        <button class="btn btn-primary pull-right" type="button" onclick="EditInformation(6)">Edit Information</button>
                    </div>
                </div>
            </div>




        </div>
        <div class="row" id="saveButtonForm" style=" display:none;margin-right:20px">
            <div class="form-group col-md-12">
                <button class="btn btn-primary pull-right" type="submit" style="width:100px" onclick="submitInformation()">Save</button>
            </div>
        </div>




    </div>
</div>
<script>
    function resetFormFields(id) {
        const formDiv = document.getElementById(id);
        formDiv.style.display = "none";
        formDiv.querySelectorAll("input, select, textarea").forEach(field => {
            if (field.tagName.toLowerCase() === "input" && field.type === "checkbox") {
                field.checked = field.defaultChecked;
            } else if (field.tagName.toLowerCase() === "input" || field.tagName.toLowerCase() === "textarea") {
                field.value = field.defaultValue;
            } else if (field.tagName.toLowerCase() === "select") {
                field.selectedIndex = field.defaultSelectedIndex;
            }
        });
    }

    function resetInsurancePremium(id) {
        const insurance = document.getElementById(id);
        insurance.style.display = "none";

        if (insurance) {
            // Reset all input elements within InsuranceTwoPremium
            const inputs = insurance.querySelectorAll("input, select, textarea");

            inputs.forEach(input => {
                if (input.type === "submit") {
                    return; // Skip submit buttons
                }

                if (input.type === "checkbox" || input.type === "radio") {
                    input.checked = false;
                } else if (input.type === "file") {
                    input.value = ""; // Clear file input
                } else {
                    input.value = ""; // Reset other input types
                }
            });

            // Clear dynamically generated content like the attachment list
            const attachmentTable = insurance.querySelector("#uploads tbody");
            if (attachmentTable) {
                attachmentTable.innerHTML = ""; // Clear attached files table
            }
        }
    }




    function AddEmergencyCont() {
        if ($('#divEmergencyTwo').css('display') === 'none') {
            $('#divEmergencyTwo').css('display', 'block');

        } else {
            $('#divEmergencyThree').css('display', 'block');
        }


    }
    function  AddInsuranceCont(){

        if ($('#InsuranceTwoPremium').css('display') === 'none') {
            $('#InsuranceTwoPremium').css('display', 'block');

        } else {
            $('#InsuranceThreePremium').css('display', 'block');
        }
    }
    function EditInformation(positionVal) {
        $('#step7').hide();
        //document.getElementById('saveButtonForm').style.display = "none";
        switch (positionVal) {
            case 1:
                $('#patient').show();
                enableNextStep('patient');

                break;
            case 2:
                $('#spouse').show();
                enableNextStep('spouse');
                break;
            case 3:
                $('#minor').show();
                enableNextStep('minor');
                break;
            case 4:
                $('#emergency').show();
                enableNextStep('emergency');
                break;
            case 5:
                $('#insurance').show();
                enableNextStep('insurance');

                break;
            case 6:
                $('#accident').show();
                enableNextStep('accident');
                break;
            default:
                console.log("Value is not between 1 and 6");
        }
    }

    function InsertValueToStep7(data) {
        data.forEach(pair => {
            const sourceElement = document.getElementById(pair.sourceId);
            const targetElement = document.getElementById(pair.targetId);

            if (targetElement) {
                sourceElement.textContent = targetElement.value;
            } else {
                sourceElement.textContent = '';
            }
        });

    }
    //function InserValueofDropdown(data) {

    //}
    function createNotApplicableElement() {
        const centerEl = document.createElement('center');
        const h4 = document.createElement('h4');
        h4.innerHTML = "Not Applicable";
        h4.style.fontWeight = "bold";
        centerEl.appendChild(h4);
        return centerEl;
    }
    function InsertValue() {
       // document.getElementById('saveButtonForm').style.display = "block";

        const centerEl = document.createElement('center');
        const h4 = document.createElement('h4');
        h4.textContent = "Not Applicable";
        h4.style.fontWeight = "bold";
        centerEl.appendChild(h4);

        const spouseCheckbox = document.getElementById('notmarried');
        const minor = document.getElementById('notMinor');
        const emergency = document.getElementById('chkEmergecny');
        const insurance = document.getElementById('insuranceCheckBox');

        if (spouseCheckbox.checked) {
            const spouseEl = document.getElementById('spouse-Section');
            spouseEl.replaceChildren(createNotApplicableElement());
        } else {
            const spouseElement = [
                { sourceId: 'spouseFirstName', targetId: 'SpouseInformation_First_Name' },
                { sourceId: 'spouseLastName', targetId: 'SpouseInformation_Last_Name' },
                { sourceId: 'spouseBirthDate', targetId: 'SpouseInformation_BirthDate' },
                { sourceId: 'spouseHomePhone', targetId: 'SpouseInformation_Home_Phone' }
            ];
            const raceValue = document.getElementById('spouse-race');
            document.getElementById('spouseRace').textContent = raceValue.options[raceValue.selectedIndex].text;
            InsertValueToStep7(spouseElement);
        }

        if (minor.checked) {
            const minrElement = document.getElementById('minor-Section');
            minrElement.replaceChildren(createNotApplicableElement());
        } else {
            const value = document.getElementById('choosegurantor').value;
            if (value === "1") {
                document.getElementById('MotherSection').style.display = "block";
                document.getElementById('FatherSection').style.display = "none";
                const motherElement = [
                    { sourceId: 'motherFirstName', targetId: 'MinorInformation_MontherMinorInformation_First_Name' },
                    { sourceId: 'motherLastName', targetId: 'MinorInformation_MontherMinorInformation_Last_Name' },
                    { sourceId: 'motherBirthDate', targetId: 'MinorInformation_MontherMinorInformation_Dob' },
                    { sourceId: 'motherRace', targetId: 'minor-mother-race' },
                    { sourceId: 'motherHomePhone', targetId: 'MinorInformation_MontherMinorInformation_HomePhone' }
                ];
                const raceValue = document.getElementById('minor-mother-race');
                document.getElementById('motherRace').textContent = raceValue.options[raceValue.selectedIndex].text;
                InsertValueToStep7(motherElement);
            } else if (value === "2") {
                document.getElementById('FatherSection').style.display = "block";
                document.getElementById('MotherSection').style.display = "none";
                const fatherElement = [
                    { sourceId: 'fatherFirstName', targetId: 'MinorInformation_FatherMinorInformation_First_Name' },
                    { sourceId: 'fatherLastName', targetId: 'MinorInformation_FatherMinorInformation_Last_Name' },
                    { sourceId: 'fatherBirthDate', targetId: 'MinorInformation_FatherMinorInformation_Dob' },
                    { sourceId: 'fatherHomePhone', targetId: 'MinorInformation_FatherMinorInformation_HomePhone' }
                ];
                const raceValue = document.getElementById('minor-father-race');
                document.getElementById('fatherRace').textContent = raceValue.options[raceValue.selectedIndex].text;
                InsertValueToStep7(fatherElement);
            } else if (value === "3") {
                document.getElementById('MotherSection').style.display = "block";
                document.getElementById('FatherSection').style.display = "block";
                const BothFatMot = [
                    { sourceId: 'fatherFirstName', targetId: 'MinorInformation_FatherMinorInformation_First_Name' },
                    { sourceId: 'fatherLastName', targetId: 'MinorInformation_FatherMinorInformation_Last_Name' },
                    { sourceId: 'fatherBirthDate', targetId: 'MinorInformation_FatherMinorInformation_Dob' },
                    { sourceId: 'fatherHomePhone', targetId: 'MinorInformation_FatherMinorInformation_HomePhone' },
                    { sourceId: 'motherFirstName', targetId: 'MinorInformation_MontherMinorInformation_First_Name' },
                    { sourceId: 'motherLastName', targetId: 'MinorInformation_MontherMinorInformation_Last_Name' },
                    { sourceId: 'motherBirthDate', targetId: 'MinorInformation_MontherMinorInformation_Dob' },
                    { sourceId: 'motherHomePhone', targetId: 'MinorInformation_MontherMinorInformation_HomePhone' }
                ];
                const raceValue1 = document.getElementById('minor-mother-race');
                document.getElementById('motherRace').textContent = raceValue1.options[raceValue1.selectedIndex].text;
                const raceValue2 = document.getElementById('minor-father-race');
                document.getElementById('fatherRace').textContent = raceValue2.options[raceValue2.selectedIndex].text;
                InsertValueToStep7(BothFatMot);
            } else {
                const minrElement = document.getElementById('minor-Section');
                minrElement.replaceChildren(createNotApplicableElement());
            }
        }

        if (emergency.checked) {
            const emrgncy = document.getElementById('emergency-Section');
            if (emrgncy != null && emrgncy != undefined) {
                emrgncy.replaceChildren(createNotApplicableElement());
            }
        } else {
            const emrgncyEl = [
                { sourceId: "EmergencyNearestRelativeName", targetId: 'EmergencyContact_EmergencyContactOne_Nearest_Relative_Name' },
                { sourceId: "EmergencyNearestRelativeName2", targetId: 'EmergencyContact_EmergencyContactTwo_Nearest_Relative_Name' },
                { sourceId: "EmergencyNearestRelativeName3", targetId: 'EmergencyContact_EmergencyContactThree_Nearest_Relative_Name' }
            ];
            InsertValueToStep7(emrgncyEl);

            if (document.getElementById('divEmergencyTwo').style.display === 'block') {
                document.getElementById('emergencySection2').style.display = 'block';
            }
            if (document.getElementById('divEmergencyThree').style.display === 'block') {
                document.getElementById('emergencySection3').style.display = 'block';
            }
        }

        if (insurance.checked) {
            const insurelement = document.getElementById('insurance-section');
            insurelement.replaceChildren(createNotApplicableElement());
        } else {
            const insEl = [
                { sourceId: "insuranceInsRank1", targetId: 'InsuranceInformation_InsuranceOne_InsRank' },
                { sourceId: "insurancePolicyNumber1", targetId: 'InsuranceInformation_InsuranceOne_Policy_Number' },
                { sourceId: "insuranceInsRank2", targetId: 'InsuranceInformation_InsuranceTwo_InsRank' },
                { sourceId: "insurancePolicyNumber2", targetId: 'InsuranceInformation_InsuranceTwo_Policy_Number' },
                { sourceId: "insuranceInsRank3", targetId: 'InsuranceInformation_InsuranceThree_InsRank' },
                { sourceId: "insurancePolicyNumber3", targetId: 'InsuranceInformation_InsuranceThree_Policy_Number' }
            ];
            InsertValueToStep7(insEl);

            if (document.getElementById('InsuranceTwoPremium').style.display === 'block') {
                document.getElementById('insurance-section2').style.display = 'block';
            }
            if (document.getElementById('InsuranceThreePremium').style.display === 'block') {
                document.getElementById('insurance-section3').style.display = 'block';
            }
        }

        const elements = [
            { sourceId: 'firstName', targetId: 'PatientDemographicsViewModel_First_Name' },
            { sourceId: 'lastName', targetId: 'PatientDemographicsViewModel_Last_Name' },
            { sourceId: 'dateOfBirth', targetId: 'PatientDemographicsViewModel_BirthDate' },
            { sourceId: 'preferredPhone', targetId: 'PatientDemographicsViewModel_Home_Phone' },
            { sourceId: 'emailAddress', targetId: 'PatientDemographicsViewModel_Email_Address' },
            { sourceId: 'primaryCareProvider', targetId: 'PatientDemographicsViewModel_PrimaryCarePhys' },
            { sourceId: "AccidentPolicyNumber", targetId: 'AccentInformationPolicyNumber' },
            { sourceId: "AccidentInsuranceRank", targetId: 'AccentInformationInsRank' }
        ];

        const raceSelect = document.getElementById("race");
        document.getElementById('raceValue').textContent = raceSelect.options[raceSelect.selectedIndex].text;

        const hospitalLoc = document.getElementById('hospitalId');
        document.getElementById('serviceLocation').textContent = hospitalLoc.options[hospitalLoc.selectedIndex].text;

        const Guarantor = document.getElementById('guarantor');
        document.getElementById('guarantorValue').textContent = Guarantor.options[Guarantor.selectedIndex].text;

        const Ethnicity = document.getElementById('ethincity');
        document.getElementById('ethnicityValue').textContent = Ethnicity.options[Ethnicity.selectedIndex].text;

        const marital = document.getElementById('maritalstatus');
        document.getElementById('maritalStatusValue').textContent = marital.options[marital.selectedIndex].text;

        InsertValueToStep7(elements);

        const dropdownElement = [
            { sourceId: "RegisteerService", targetId: document.querySelector('input[name="PatientDemographicsViewModel.HospitalService"]:checked') },
            { sourceId: "BirthGender", targetId: document.querySelector('input[name="PatientDemographicsViewModel.Gender"]:checked') },
            { sourceId: "AccidentType", targetId: document.querySelector('input[name="AccidentDetail.AccidentTypeID"]:checked') }
        ];

        dropdownElement.forEach(item => {
            const sourceElement = document.getElementById(item.sourceId);
            if (item.targetId) {
                sourceElement.textContent = item.targetId.value;
            } else {
                sourceElement.textContent = '';
            }
        });
    }




        // Call the function to populate the sources from the spans



    $(document).ready(function () {
      //  $("#PatientDemographicsViewModel_AdmitDate").datepicker({ minDate: new Date() });
        disablePastDates();
        disableFutureDates();
        $("#notmarried").change(function () {
            if (this.checked) {
                $('#divSpouse').hide();
            }
            else {
                $('#divSpouse').show();
            }
        });

        $('#divMinorMother').hide();
        $('#divMinorFather').hide();

        var uploadToAdd = [];
                if ($("#attachFile").length > 0) {
            //it doesn't exist

            document.getElementById('attachFile').onclick = function (e) {
                $("#attached").hide();
                e.preventDefault();
                var formdata = new FormData(); //FormData object
                var fileInput = document.getElementById('fileInput');
                var hiddenEl = "#" + $(this).data("atta");
                if (fileInput.files.length < 1) {
                    $("#attached").html("Please attach a file before uploading");
                    $("#attached").show();
                }
                else {
                    $("#attachFile").prop("disabled", true);
                    $("#attachFile").val("Processing...");
                    var attachmentName = fileInput.files[0].name;
                    //Iterating through each files selected in fileInput
                    for (i = 0; i < fileInput.files.length; i++) {
                        //Appending each file to FormData object
                        formdata.append(fileInput.files[i].name, fileInput.files[i]);
                    }
                    //Creating an XMLHttpRequest and sending
                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', '@Url.Action("Upload", "PreRegistration")');   // production version
                    xhr.send(formdata);
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 4 && xhr.status == 200) {
                            if (xhr.responseText != "\"Error\"") {
                                $("#UploadedFileGuid").val(xhr.responseText.replace(/['"]+/g, ''));
                                uploadToAdd.push(xhr.responseText.replace(/['"]+/g, ''));
                                var table = $('#uploads').DataTable();
                                table.row.add([
                                    xhr.responseText.replace(/['"]+/g, ''),
                                    attachmentName,
                                    null
                                ]).draw();
                                $(hiddenEl).val(xhr.responseText.replace(/['"]+/g, '') + "/" + attachmentName);
                                $("#attached").html("File successfully uploaded")
                                $("#attached").show();
                                document.getElementById("fileInput").value = "";
                               // $errorDiv.hide();
                            } else {
                                $("#attached").html(xhr.responseText);
                                $("#attached").show();
                            }
                        }
                    }
                    $("#attachFile").prop("disabled", false);
                    $("#attachFile").val("Upload file");
                    //return false;
                }
            }
        }

                var dtUploads = $('#uploads').DataTable({
            "bLengthChange": false,
            "bFilter": false,
            "columnDefs": [
                {
                    "aTargets": [2],
                    "mData": 0,
                    "mRender": function (data, type, full) {
                        return '<button type="button" class="btn1 btn-primary box-shadow--8dp" id="uploaddeletebtn">X</button>';
                    },
                    "sClass": "alignCenter",
                    "fnCreatedCell": function (cell) {
                        $('#uploaddeletebtn', cell)
                            .button({
                                text: true,
                                icons: {
                                    primary: "ui-icon-circle-minus"
                                }
                            })
                            .click(function (event) {
                                event.preventDefault();
                                var row = dtUploads.row($(this).parents('tr')).data();
                                var rowdata = row[0];
                                var rowToRemove = dtUploads.row($(this).parents('tr'))[0];
                                $.ajax({
                                    url: '@Url.Action("DeleteFile", "PreRegistration")',
                                    cache: false,
                                    data: { fileId: rowdata, bridgeId: 0},
                                    success: function (html) {
                                        uploadToAdd.splice(rowToRemove, 1);
                                        dtUploads.row(rowToRemove).remove().draw();
                                        $("#attached").hide();
                                    }
                                });

                            });
                    }
                }]
        });

        $("#PatientDemographicsViewModel_BirthDate").change(function () {
            var dob = $("#PatientDemographicsViewModel_BirthDate").val();
            var age = calculateAge(dob);
            $("#PatientDemographicsViewModel_Age").val(age);
            console.log(age);
        });

        $("#maritalstatus").change(function () {
            if ($("#maritalstatus option:selected").val() === 'Married') {
                $("#PatientDemographicsViewModel_IsMarried").val(1);
            } else {
                $("#PatientDemographicsViewModel_IsMarried").val(0);
            }
        });
    });

    function calculateAge(birthDate) {
        var today = new Date();
        var birthDate = new Date(birthDate);
        var age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        return age;
    }

    function disablePastDates() {
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;
        document.getElementById("PatientDemographicsViewModel_AdmitDate").setAttribute("min", today);
    }

    function disableFutureDates() {
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;
        document.getElementById("PatientDemographicsViewModel_BirthDate").setAttribute("max", today);
        document.getElementById("SpouseInformation_BirthDate").setAttribute("max", today);
        document.getElementById("MinorInformation_MontherMinorInformation_Dob").setAttribute("max", today);
        document.getElementById("MinorInformation_FatherMinorInformation_Dob").setAttribute("max", today);
    }

</script>