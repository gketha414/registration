//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;
using PreRegistration.Models;

public partial class PatientPreRegistrationEntities : DbContext
{
    public PatientPreRegistrationEntities()
        : base("name=PatientPreRegistrationEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<AccidentDetail> AccidentDetails { get; set; }
    public virtual DbSet<AccidentType> AccidentTypes { get; set; }
    public virtual DbSet<EmergencyContact> EmergencyContacts { get; set; }
    public virtual DbSet<FormSection> FormSections { get; set; }
    public virtual DbSet<Hospital> Hospitals { get; set; }
    public virtual DbSet<InsuranceInformation> InsuranceInformations { get; set; }
    public virtual DbSet<MinorInformation> MinorInformations { get; set; }
    public virtual DbSet<PatientDemographic> PatientDemographics { get; set; }
    public virtual DbSet<ResponsibleParty> ResponsibleParties { get; set; }
    public virtual DbSet<SpouseInformation> SpouseInformations { get; set; }
    public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    public virtual DbSet<State> States { get; set; }
    public virtual DbSet<VW_PatientDemosGridView> VW_PatientDemosGridView { get; set; }

    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));

        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }

    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));

        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }

    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }

    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }

    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }

    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }

    public virtual int sp_upgraddiagrams()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }

    public virtual int usp_DeletePatientInfoFromPreReg(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeletePatientInfoFromPreReg", personIDParameter);
    }

    public virtual ObjectResult<usp_FindByID_Accident_Result> usp_FindByID_Accident(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FindByID_Accident_Result>("usp_FindByID_Accident", personIDParameter);
    }

    public virtual ObjectResult<usp_FindByID_EmergContact_Result> usp_FindByID_EmergContact(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FindByID_EmergContact_Result>("usp_FindByID_EmergContact", personIDParameter);
    }

    public virtual ObjectResult<usp_FindByID_Insurances_Result> usp_FindByID_Insurances(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FindByID_Insurances_Result>("usp_FindByID_Insurances", personIDParameter);
    }

    public virtual ObjectResult<usp_FindByID_Minors_Result> usp_FindByID_Minors(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FindByID_Minors_Result>("usp_FindByID_Minors", personIDParameter);
    }

    public virtual ObjectResult<usp_FindByID_Person_Result> usp_FindByID_Person(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FindByID_Person_Result>("usp_FindByID_Person", personIDParameter);
    }

    public virtual ObjectResult<usp_FindByID_Spouse_Result> usp_FindByID_Spouse(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FindByID_Spouse_Result>("usp_FindByID_Spouse", personIDParameter);
    }

    public virtual ObjectResult<usp_GetInsuranceByPersonID_Result> usp_GetInsuranceByPersonID(Nullable<int> insId, Nullable<int> personID, Nullable<short> insRank, string insPlanName, string subscriber_Name, string rel_PolicyHolder_To_Patient, string policy_Number, string group_Number, string insAddress1, string insAddress2, string insCity, string insState, Nullable<long> insZip, Nullable<long> insPhone)
    {
        var insIdParameter = insId.HasValue ?
            new ObjectParameter("InsId", insId) :
            new ObjectParameter("InsId", typeof(int));

        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        var insRankParameter = insRank.HasValue ?
            new ObjectParameter("InsRank", insRank) :
            new ObjectParameter("InsRank", typeof(short));

        var insPlanNameParameter = insPlanName != null ?
            new ObjectParameter("InsPlanName", insPlanName) :
            new ObjectParameter("InsPlanName", typeof(string));

        var subscriber_NameParameter = subscriber_Name != null ?
            new ObjectParameter("Subscriber_Name", subscriber_Name) :
            new ObjectParameter("Subscriber_Name", typeof(string));

        var rel_PolicyHolder_To_PatientParameter = rel_PolicyHolder_To_Patient != null ?
            new ObjectParameter("Rel_PolicyHolder_To_Patient", rel_PolicyHolder_To_Patient) :
            new ObjectParameter("Rel_PolicyHolder_To_Patient", typeof(string));

        var policy_NumberParameter = policy_Number != null ?
            new ObjectParameter("Policy_Number", policy_Number) :
            new ObjectParameter("Policy_Number", typeof(string));

        var group_NumberParameter = group_Number != null ?
            new ObjectParameter("Group_Number", group_Number) :
            new ObjectParameter("Group_Number", typeof(string));

        var insAddress1Parameter = insAddress1 != null ?
            new ObjectParameter("InsAddress1", insAddress1) :
            new ObjectParameter("InsAddress1", typeof(string));

        var insAddress2Parameter = insAddress2 != null ?
            new ObjectParameter("InsAddress2", insAddress2) :
            new ObjectParameter("InsAddress2", typeof(string));

        var insCityParameter = insCity != null ?
            new ObjectParameter("InsCity", insCity) :
            new ObjectParameter("InsCity", typeof(string));

        var insStateParameter = insState != null ?
            new ObjectParameter("InsState", insState) :
            new ObjectParameter("InsState", typeof(string));

        var insZipParameter = insZip.HasValue ?
            new ObjectParameter("InsZip", insZip) :
            new ObjectParameter("InsZip", typeof(long));

        var insPhoneParameter = insPhone.HasValue ?
            new ObjectParameter("InsPhone", insPhone) :
            new ObjectParameter("InsPhone", typeof(long));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetInsuranceByPersonID_Result>("usp_GetInsuranceByPersonID", insIdParameter, personIDParameter, insRankParameter, insPlanNameParameter, subscriber_NameParameter, rel_PolicyHolder_To_PatientParameter, policy_NumberParameter, group_NumberParameter, insAddress1Parameter, insAddress2Parameter, insCityParameter, insStateParameter, insZipParameter, insPhoneParameter);
    }

    public virtual ObjectResult<usp_GetNonProcessedPatients_Result> usp_GetNonProcessedPatients(Nullable<short> hospitalID)
    {
        var hospitalIDParameter = hospitalID.HasValue ?
            new ObjectParameter("HospitalID", hospitalID) :
            new ObjectParameter("HospitalID", typeof(short));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNonProcessedPatients_Result>("usp_GetNonProcessedPatients", hospitalIDParameter);
    }

    public virtual ObjectResult<usp_GetProcessedPatients_Result> usp_GetProcessedPatients(Nullable<short> hospitalID)
    {
        var hospitalIDParameter = hospitalID.HasValue ?
            new ObjectParameter("HospitalID", hospitalID) :
            new ObjectParameter("HospitalID", typeof(short));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProcessedPatients_Result>("usp_GetProcessedPatients", hospitalIDParameter);
    }

    public virtual ObjectResult<Nullable<decimal>> usp_InsertAccidentDetail(Nullable<int> personID, Nullable<short> accidentTypeID, string dateOfAccident, string timeOfAccident, string location)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        var accidentTypeIDParameter = accidentTypeID.HasValue ?
            new ObjectParameter("AccidentTypeID", accidentTypeID) :
            new ObjectParameter("AccidentTypeID", typeof(short));

        var dateOfAccidentParameter = dateOfAccident != null ?
            new ObjectParameter("DateOfAccident", dateOfAccident) :
            new ObjectParameter("DateOfAccident", typeof(string));

        var timeOfAccidentParameter = timeOfAccident != null ?
            new ObjectParameter("TimeOfAccident", timeOfAccident) :
            new ObjectParameter("TimeOfAccident", typeof(string));

        var locationParameter = location != null ?
            new ObjectParameter("Location", location) :
            new ObjectParameter("Location", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertAccidentDetail", personIDParameter, accidentTypeIDParameter, dateOfAccidentParameter, timeOfAccidentParameter, locationParameter);
    }

    public virtual ObjectResult<Nullable<decimal>> usp_InsertEmergContact(Nullable<int> personID, string nearest_Relative_Name, string relationship, string address1, string address2, string city, string stateProvince, Nullable<long> zipCode, Nullable<long> contact_Phone)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        var nearest_Relative_NameParameter = nearest_Relative_Name != null ?
            new ObjectParameter("Nearest_Relative_Name", nearest_Relative_Name) :
            new ObjectParameter("Nearest_Relative_Name", typeof(string));

        var relationshipParameter = relationship != null ?
            new ObjectParameter("Relationship", relationship) :
            new ObjectParameter("Relationship", typeof(string));

        var address1Parameter = address1 != null ?
            new ObjectParameter("Address1", address1) :
            new ObjectParameter("Address1", typeof(string));

        var address2Parameter = address2 != null ?
            new ObjectParameter("Address2", address2) :
            new ObjectParameter("Address2", typeof(string));

        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));

        var stateProvinceParameter = stateProvince != null ?
            new ObjectParameter("StateProvince", stateProvince) :
            new ObjectParameter("StateProvince", typeof(string));

        var zipCodeParameter = zipCode.HasValue ?
            new ObjectParameter("ZipCode", zipCode) :
            new ObjectParameter("ZipCode", typeof(long));

        var contact_PhoneParameter = contact_Phone.HasValue ?
            new ObjectParameter("Contact_Phone", contact_Phone) :
            new ObjectParameter("Contact_Phone", typeof(long));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertEmergContact", personIDParameter, nearest_Relative_NameParameter, relationshipParameter, address1Parameter, address2Parameter, cityParameter, stateProvinceParameter, zipCodeParameter, contact_PhoneParameter);
    }

    public virtual ObjectResult<Nullable<decimal>> usp_InsertInsuranceInfo(Nullable<int> personID, Nullable<short> insRank, string insPlanName, string subscriber_Name, string rel_PolicyHolder_To_Patient, string policy_Number, string group_Number, string planCode, string insAddress1, string insAddress2, string insCity, string insState, Nullable<long> insZip, Nullable<long> insPhone)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        var insRankParameter = insRank.HasValue ?
            new ObjectParameter("InsRank", insRank) :
            new ObjectParameter("InsRank", typeof(short));

        var insPlanNameParameter = insPlanName != null ?
            new ObjectParameter("InsPlanName", insPlanName) :
            new ObjectParameter("InsPlanName", typeof(string));

        var subscriber_NameParameter = subscriber_Name != null ?
            new ObjectParameter("Subscriber_Name", subscriber_Name) :
            new ObjectParameter("Subscriber_Name", typeof(string));

        var rel_PolicyHolder_To_PatientParameter = rel_PolicyHolder_To_Patient != null ?
            new ObjectParameter("Rel_PolicyHolder_To_Patient", rel_PolicyHolder_To_Patient) :
            new ObjectParameter("Rel_PolicyHolder_To_Patient", typeof(string));

        var policy_NumberParameter = policy_Number != null ?
            new ObjectParameter("Policy_Number", policy_Number) :
            new ObjectParameter("Policy_Number", typeof(string));

        var group_NumberParameter = group_Number != null ?
            new ObjectParameter("Group_Number", group_Number) :
            new ObjectParameter("Group_Number", typeof(string));

        var planCodeParameter = planCode != null ?
            new ObjectParameter("PlanCode", planCode) :
            new ObjectParameter("PlanCode", typeof(string));

        var insAddress1Parameter = insAddress1 != null ?
            new ObjectParameter("InsAddress1", insAddress1) :
            new ObjectParameter("InsAddress1", typeof(string));

        var insAddress2Parameter = insAddress2 != null ?
            new ObjectParameter("InsAddress2", insAddress2) :
            new ObjectParameter("InsAddress2", typeof(string));

        var insCityParameter = insCity != null ?
            new ObjectParameter("InsCity", insCity) :
            new ObjectParameter("InsCity", typeof(string));

        var insStateParameter = insState != null ?
            new ObjectParameter("InsState", insState) :
            new ObjectParameter("InsState", typeof(string));

        var insZipParameter = insZip.HasValue ?
            new ObjectParameter("InsZip", insZip) :
            new ObjectParameter("InsZip", typeof(long));

        var insPhoneParameter = insPhone.HasValue ?
            new ObjectParameter("InsPhone", insPhone) :
            new ObjectParameter("InsPhone", typeof(long));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertInsuranceInfo", personIDParameter, insRankParameter, insPlanNameParameter, subscriber_NameParameter, rel_PolicyHolder_To_PatientParameter, policy_NumberParameter, group_NumberParameter, planCodeParameter, insAddress1Parameter, insAddress2Parameter, insCityParameter, insStateParameter, insZipParameter, insPhoneParameter);
    }

    public virtual ObjectResult<Nullable<decimal>> usp_InsertMinorInfo(Nullable<int> personID, Nullable<int> responsiblePartyID, string first_Name, string middle_Init, string last_Name, string address1, string address2, string city, string stateProvince, Nullable<long> zipCode, Nullable<System.DateTime> dob, string race, string marital_Status, string sSN, Nullable<long> homePhone, Nullable<long> cell_Phone, string mailAddress1, string mailAddress2, string mailCity, string mailState, Nullable<long> mailZip, string e911Address1, string e911Address2, string e911City, string e911State, Nullable<long> e911Zip, string billAddress1, string billAddress2, string billCity, string billState, Nullable<long> billZip, string employer, string job_Title, string employerAddress1, string employerAddress2, string employerCity, string employerState, Nullable<long> employerZip, Nullable<long> employerPhone)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        var responsiblePartyIDParameter = responsiblePartyID.HasValue ?
            new ObjectParameter("ResponsiblePartyID", responsiblePartyID) :
            new ObjectParameter("ResponsiblePartyID", typeof(int));

        var first_NameParameter = first_Name != null ?
            new ObjectParameter("First_Name", first_Name) :
            new ObjectParameter("First_Name", typeof(string));

        var middle_InitParameter = middle_Init != null ?
            new ObjectParameter("Middle_Init", middle_Init) :
            new ObjectParameter("Middle_Init", typeof(string));

        var last_NameParameter = last_Name != null ?
            new ObjectParameter("Last_Name", last_Name) :
            new ObjectParameter("Last_Name", typeof(string));

        var address1Parameter = address1 != null ?
            new ObjectParameter("Address1", address1) :
            new ObjectParameter("Address1", typeof(string));

        var address2Parameter = address2 != null ?
            new ObjectParameter("Address2", address2) :
            new ObjectParameter("Address2", typeof(string));

        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));

        var stateProvinceParameter = stateProvince != null ?
            new ObjectParameter("StateProvince", stateProvince) :
            new ObjectParameter("StateProvince", typeof(string));

        var zipCodeParameter = zipCode.HasValue ?
            new ObjectParameter("ZipCode", zipCode) :
            new ObjectParameter("ZipCode", typeof(long));

        var dobParameter = dob.HasValue ?
            new ObjectParameter("Dob", dob) :
            new ObjectParameter("Dob", typeof(System.DateTime));

        var raceParameter = race != null ?
            new ObjectParameter("Race", race) :
            new ObjectParameter("Race", typeof(string));

        var marital_StatusParameter = marital_Status != null ?
            new ObjectParameter("Marital_Status", marital_Status) :
            new ObjectParameter("Marital_Status", typeof(string));

        var sSNParameter = sSN != null ?
            new ObjectParameter("SSN", sSN) :
            new ObjectParameter("SSN", typeof(string));

        var homePhoneParameter = homePhone.HasValue ?
            new ObjectParameter("HomePhone", homePhone) :
            new ObjectParameter("HomePhone", typeof(long));

        var cell_PhoneParameter = cell_Phone.HasValue ?
            new ObjectParameter("Cell_Phone", cell_Phone) :
            new ObjectParameter("Cell_Phone", typeof(long));

        var mailAddress1Parameter = mailAddress1 != null ?
            new ObjectParameter("MailAddress1", mailAddress1) :
            new ObjectParameter("MailAddress1", typeof(string));

        var mailAddress2Parameter = mailAddress2 != null ?
            new ObjectParameter("MailAddress2", mailAddress2) :
            new ObjectParameter("MailAddress2", typeof(string));

        var mailCityParameter = mailCity != null ?
            new ObjectParameter("MailCity", mailCity) :
            new ObjectParameter("MailCity", typeof(string));

        var mailStateParameter = mailState != null ?
            new ObjectParameter("MailState", mailState) :
            new ObjectParameter("MailState", typeof(string));

        var mailZipParameter = mailZip.HasValue ?
            new ObjectParameter("MailZip", mailZip) :
            new ObjectParameter("MailZip", typeof(long));

        var e911Address1Parameter = e911Address1 != null ?
            new ObjectParameter("E911Address1", e911Address1) :
            new ObjectParameter("E911Address1", typeof(string));

        var e911Address2Parameter = e911Address2 != null ?
            new ObjectParameter("E911Address2", e911Address2) :
            new ObjectParameter("E911Address2", typeof(string));

        var e911CityParameter = e911City != null ?
            new ObjectParameter("E911City", e911City) :
            new ObjectParameter("E911City", typeof(string));

        var e911StateParameter = e911State != null ?
            new ObjectParameter("E911State", e911State) :
            new ObjectParameter("E911State", typeof(string));

        var e911ZipParameter = e911Zip.HasValue ?
            new ObjectParameter("E911Zip", e911Zip) :
            new ObjectParameter("E911Zip", typeof(long));

        var billAddress1Parameter = billAddress1 != null ?
            new ObjectParameter("BillAddress1", billAddress1) :
            new ObjectParameter("BillAddress1", typeof(string));

        var billAddress2Parameter = billAddress2 != null ?
            new ObjectParameter("BillAddress2", billAddress2) :
            new ObjectParameter("BillAddress2", typeof(string));

        var billCityParameter = billCity != null ?
            new ObjectParameter("BillCity", billCity) :
            new ObjectParameter("BillCity", typeof(string));

        var billStateParameter = billState != null ?
            new ObjectParameter("BillState", billState) :
            new ObjectParameter("BillState", typeof(string));

        var billZipParameter = billZip.HasValue ?
            new ObjectParameter("BillZip", billZip) :
            new ObjectParameter("BillZip", typeof(long));

        var employerParameter = employer != null ?
            new ObjectParameter("Employer", employer) :
            new ObjectParameter("Employer", typeof(string));

        var job_TitleParameter = job_Title != null ?
            new ObjectParameter("Job_Title", job_Title) :
            new ObjectParameter("Job_Title", typeof(string));

        var employerAddress1Parameter = employerAddress1 != null ?
            new ObjectParameter("EmployerAddress1", employerAddress1) :
            new ObjectParameter("EmployerAddress1", typeof(string));

        var employerAddress2Parameter = employerAddress2 != null ?
            new ObjectParameter("EmployerAddress2", employerAddress2) :
            new ObjectParameter("EmployerAddress2", typeof(string));

        var employerCityParameter = employerCity != null ?
            new ObjectParameter("EmployerCity", employerCity) :
            new ObjectParameter("EmployerCity", typeof(string));

        var employerStateParameter = employerState != null ?
            new ObjectParameter("EmployerState", employerState) :
            new ObjectParameter("EmployerState", typeof(string));

        var employerZipParameter = employerZip.HasValue ?
            new ObjectParameter("EmployerZip", employerZip) :
            new ObjectParameter("EmployerZip", typeof(long));

        var employerPhoneParameter = employerPhone.HasValue ?
            new ObjectParameter("EmployerPhone", employerPhone) :
            new ObjectParameter("EmployerPhone", typeof(long));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertMinorInfo", personIDParameter, responsiblePartyIDParameter, first_NameParameter, middle_InitParameter, last_NameParameter, address1Parameter, address2Parameter, cityParameter, stateProvinceParameter, zipCodeParameter, dobParameter, raceParameter, marital_StatusParameter, sSNParameter, homePhoneParameter, cell_PhoneParameter, mailAddress1Parameter, mailAddress2Parameter, mailCityParameter, mailStateParameter, mailZipParameter, e911Address1Parameter, e911Address2Parameter, e911CityParameter, e911StateParameter, e911ZipParameter, billAddress1Parameter, billAddress2Parameter, billCityParameter, billStateParameter, billZipParameter, employerParameter, job_TitleParameter, employerAddress1Parameter, employerAddress2Parameter, employerCityParameter, employerStateParameter, employerZipParameter, employerPhoneParameter);
    }

    public virtual ObjectResult<Nullable<decimal>> usp_InsertPatientDemos(Nullable<short> sectionID, Nullable<short> hospitalID, Nullable<bool> in_Hospital_Directory, string hospitalService, string primaryCarePhys, Nullable<System.DateTime> admitDate, Nullable<bool> patientHereBefore, string first_Name, string middle_Name, string last_Name, string entitlement, string gender, string address1, string address2, string city, string stateProvince, Nullable<long> zipCode, Nullable<System.DateTime> birthDate, string race, string marital_Status, string sSN, Nullable<long> home_Phone, Nullable<long> cell_Phone, string email_Address, string church_Choice, string mailing_Address1, string mailing_Address2, string mailingCity, string mailingState, Nullable<long> mailingZip, string e911Address1, string e911Address2, string e911City, string e911State, Nullable<long> e911Zip, Nullable<int> responsiblePartyID, string guarNameIfOther, string bill_Address1, string bill_Address2, string bill_City, string bill_State, Nullable<long> bill_ZipCode, string employer, string job_Title, string employerAddress1, string employerAddress2, string employerCity, string employerState, Nullable<long> employerZip, Nullable<long> employerPhone, string status, Nullable<System.DateTime> created, Nullable<System.DateTime> modified, string modifiedBy)
    {
        var sectionIDParameter = sectionID.HasValue ?
            new ObjectParameter("SectionID", sectionID) :
            new ObjectParameter("SectionID", typeof(short));

        var hospitalIDParameter = hospitalID.HasValue ?
            new ObjectParameter("HospitalID", hospitalID) :
            new ObjectParameter("HospitalID", typeof(short));

        var in_Hospital_DirectoryParameter = in_Hospital_Directory.HasValue ?
            new ObjectParameter("In_Hospital_Directory", in_Hospital_Directory) :
            new ObjectParameter("In_Hospital_Directory", typeof(bool));

        var hospitalServiceParameter = hospitalService != null ?
            new ObjectParameter("HospitalService", hospitalService) :
            new ObjectParameter("HospitalService", typeof(string));

        var primaryCarePhysParameter = primaryCarePhys != null ?
            new ObjectParameter("PrimaryCarePhys", primaryCarePhys) :
            new ObjectParameter("PrimaryCarePhys", typeof(string));

        var admitDateParameter = admitDate.HasValue ?
            new ObjectParameter("AdmitDate", admitDate) :
            new ObjectParameter("AdmitDate", typeof(System.DateTime));

        var patientHereBeforeParameter = patientHereBefore.HasValue ?
            new ObjectParameter("PatientHereBefore", patientHereBefore) :
            new ObjectParameter("PatientHereBefore", typeof(bool));

        var first_NameParameter = first_Name != null ?
            new ObjectParameter("First_Name", first_Name) :
            new ObjectParameter("First_Name", typeof(string));

        var middle_NameParameter = middle_Name != null ?
            new ObjectParameter("Middle_Name", middle_Name) :
            new ObjectParameter("Middle_Name", typeof(string));

        var last_NameParameter = last_Name != null ?
            new ObjectParameter("Last_Name", last_Name) :
            new ObjectParameter("Last_Name", typeof(string));

        var entitlementParameter = entitlement != null ?
            new ObjectParameter("Entitlement", entitlement) :
            new ObjectParameter("Entitlement", typeof(string));

        var genderParameter = gender != null ?
            new ObjectParameter("Gender", gender) :
            new ObjectParameter("Gender", typeof(string));

        var address1Parameter = address1 != null ?
            new ObjectParameter("Address1", address1) :
            new ObjectParameter("Address1", typeof(string));

        var address2Parameter = address2 != null ?
            new ObjectParameter("Address2", address2) :
            new ObjectParameter("Address2", typeof(string));

        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));

        var stateProvinceParameter = stateProvince != null ?
            new ObjectParameter("StateProvince", stateProvince) :
            new ObjectParameter("StateProvince", typeof(string));

        var zipCodeParameter = zipCode.HasValue ?
            new ObjectParameter("ZipCode", zipCode) :
            new ObjectParameter("ZipCode", typeof(long));

        var birthDateParameter = birthDate.HasValue ?
            new ObjectParameter("BirthDate", birthDate) :
            new ObjectParameter("BirthDate", typeof(System.DateTime));

        var raceParameter = race != null ?
            new ObjectParameter("Race", race) :
            new ObjectParameter("Race", typeof(string));

        var marital_StatusParameter = marital_Status != null ?
            new ObjectParameter("Marital_Status", marital_Status) :
            new ObjectParameter("Marital_Status", typeof(string));

        var sSNParameter = sSN != null ?
            new ObjectParameter("SSN", sSN) :
            new ObjectParameter("SSN", typeof(string));

        var home_PhoneParameter = home_Phone.HasValue ?
            new ObjectParameter("Home_Phone", home_Phone) :
            new ObjectParameter("Home_Phone", typeof(long));

        var cell_PhoneParameter = cell_Phone.HasValue ?
            new ObjectParameter("Cell_Phone", cell_Phone) :
            new ObjectParameter("Cell_Phone", typeof(long));

        var email_AddressParameter = email_Address != null ?
            new ObjectParameter("Email_Address", email_Address) :
            new ObjectParameter("Email_Address", typeof(string));

        var church_ChoiceParameter = church_Choice != null ?
            new ObjectParameter("Church_Choice", church_Choice) :
            new ObjectParameter("Church_Choice", typeof(string));

        var mailing_Address1Parameter = mailing_Address1 != null ?
            new ObjectParameter("Mailing_Address1", mailing_Address1) :
            new ObjectParameter("Mailing_Address1", typeof(string));

        var mailing_Address2Parameter = mailing_Address2 != null ?
            new ObjectParameter("Mailing_Address2", mailing_Address2) :
            new ObjectParameter("Mailing_Address2", typeof(string));

        var mailingCityParameter = mailingCity != null ?
            new ObjectParameter("MailingCity", mailingCity) :
            new ObjectParameter("MailingCity", typeof(string));

        var mailingStateParameter = mailingState != null ?
            new ObjectParameter("MailingState", mailingState) :
            new ObjectParameter("MailingState", typeof(string));

        var mailingZipParameter = mailingZip.HasValue ?
            new ObjectParameter("MailingZip", mailingZip) :
            new ObjectParameter("MailingZip", typeof(long));

        var e911Address1Parameter = e911Address1 != null ?
            new ObjectParameter("E911Address1", e911Address1) :
            new ObjectParameter("E911Address1", typeof(string));

        var e911Address2Parameter = e911Address2 != null ?
            new ObjectParameter("E911Address2", e911Address2) :
            new ObjectParameter("E911Address2", typeof(string));

        var e911CityParameter = e911City != null ?
            new ObjectParameter("E911City", e911City) :
            new ObjectParameter("E911City", typeof(string));

        var e911StateParameter = e911State != null ?
            new ObjectParameter("E911State", e911State) :
            new ObjectParameter("E911State", typeof(string));

        var e911ZipParameter = e911Zip.HasValue ?
            new ObjectParameter("E911Zip", e911Zip) :
            new ObjectParameter("E911Zip", typeof(long));

        var responsiblePartyIDParameter = responsiblePartyID.HasValue ?
            new ObjectParameter("ResponsiblePartyID", responsiblePartyID) :
            new ObjectParameter("ResponsiblePartyID", typeof(int));

        var guarNameIfOtherParameter = guarNameIfOther != null ?
            new ObjectParameter("GuarNameIfOther", guarNameIfOther) :
            new ObjectParameter("GuarNameIfOther", typeof(string));

        var bill_Address1Parameter = bill_Address1 != null ?
            new ObjectParameter("Bill_Address1", bill_Address1) :
            new ObjectParameter("Bill_Address1", typeof(string));

        var bill_Address2Parameter = bill_Address2 != null ?
            new ObjectParameter("Bill_Address2", bill_Address2) :
            new ObjectParameter("Bill_Address2", typeof(string));

        var bill_CityParameter = bill_City != null ?
            new ObjectParameter("Bill_City", bill_City) :
            new ObjectParameter("Bill_City", typeof(string));

        var bill_StateParameter = bill_State != null ?
            new ObjectParameter("Bill_State", bill_State) :
            new ObjectParameter("Bill_State", typeof(string));

        var bill_ZipCodeParameter = bill_ZipCode.HasValue ?
            new ObjectParameter("Bill_ZipCode", bill_ZipCode) :
            new ObjectParameter("Bill_ZipCode", typeof(long));

        var employerParameter = employer != null ?
            new ObjectParameter("Employer", employer) :
            new ObjectParameter("Employer", typeof(string));

        var job_TitleParameter = job_Title != null ?
            new ObjectParameter("Job_Title", job_Title) :
            new ObjectParameter("Job_Title", typeof(string));

        var employerAddress1Parameter = employerAddress1 != null ?
            new ObjectParameter("EmployerAddress1", employerAddress1) :
            new ObjectParameter("EmployerAddress1", typeof(string));

        var employerAddress2Parameter = employerAddress2 != null ?
            new ObjectParameter("EmployerAddress2", employerAddress2) :
            new ObjectParameter("EmployerAddress2", typeof(string));

        var employerCityParameter = employerCity != null ?
            new ObjectParameter("EmployerCity", employerCity) :
            new ObjectParameter("EmployerCity", typeof(string));

        var employerStateParameter = employerState != null ?
            new ObjectParameter("EmployerState", employerState) :
            new ObjectParameter("EmployerState", typeof(string));

        var employerZipParameter = employerZip.HasValue ?
            new ObjectParameter("EmployerZip", employerZip) :
            new ObjectParameter("EmployerZip", typeof(long));

        var employerPhoneParameter = employerPhone.HasValue ?
            new ObjectParameter("EmployerPhone", employerPhone) :
            new ObjectParameter("EmployerPhone", typeof(long));

        var statusParameter = status != null ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(string));

        var createdParameter = created.HasValue ?
            new ObjectParameter("Created", created) :
            new ObjectParameter("Created", typeof(System.DateTime));

        var modifiedParameter = modified.HasValue ?
            new ObjectParameter("Modified", modified) :
            new ObjectParameter("Modified", typeof(System.DateTime));

        var modifiedByParameter = modifiedBy != null ?
            new ObjectParameter("ModifiedBy", modifiedBy) :
            new ObjectParameter("ModifiedBy", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertPatientDemos", sectionIDParameter, hospitalIDParameter, in_Hospital_DirectoryParameter, hospitalServiceParameter, primaryCarePhysParameter, admitDateParameter, patientHereBeforeParameter, first_NameParameter, middle_NameParameter, last_NameParameter, entitlementParameter, genderParameter, address1Parameter, address2Parameter, cityParameter, stateProvinceParameter, zipCodeParameter, birthDateParameter, raceParameter, marital_StatusParameter, sSNParameter, home_PhoneParameter, cell_PhoneParameter, email_AddressParameter, church_ChoiceParameter, mailing_Address1Parameter, mailing_Address2Parameter, mailingCityParameter, mailingStateParameter, mailingZipParameter, e911Address1Parameter, e911Address2Parameter, e911CityParameter, e911StateParameter, e911ZipParameter, responsiblePartyIDParameter, guarNameIfOtherParameter, bill_Address1Parameter, bill_Address2Parameter, bill_CityParameter, bill_StateParameter, bill_ZipCodeParameter, employerParameter, job_TitleParameter, employerAddress1Parameter, employerAddress2Parameter, employerCityParameter, employerStateParameter, employerZipParameter, employerPhoneParameter, statusParameter, createdParameter, modifiedParameter, modifiedByParameter);
    }

    public virtual ObjectResult<Nullable<decimal>> usp_InsertSpouseInfo(Nullable<int> personID, string first_Name, string middle_Name, string last_Name, string address1, string address2, string city, string stateProvince, Nullable<long> zipCode, Nullable<System.DateTime> birthDate, string race, string marital_Status, string sSN, Nullable<long> home_Phone, Nullable<long> cell_Phone, string employer, string job_Title, string employerAddress1, string employerAddress2, string employerCity, string employerState, Nullable<long> employerZip, Nullable<long> employer_Phone)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        var first_NameParameter = first_Name != null ?
            new ObjectParameter("First_Name", first_Name) :
            new ObjectParameter("First_Name", typeof(string));

        var middle_NameParameter = middle_Name != null ?
            new ObjectParameter("Middle_Name", middle_Name) :
            new ObjectParameter("Middle_Name", typeof(string));

        var last_NameParameter = last_Name != null ?
            new ObjectParameter("Last_Name", last_Name) :
            new ObjectParameter("Last_Name", typeof(string));

        var address1Parameter = address1 != null ?
            new ObjectParameter("Address1", address1) :
            new ObjectParameter("Address1", typeof(string));

        var address2Parameter = address2 != null ?
            new ObjectParameter("Address2", address2) :
            new ObjectParameter("Address2", typeof(string));

        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));

        var stateProvinceParameter = stateProvince != null ?
            new ObjectParameter("StateProvince", stateProvince) :
            new ObjectParameter("StateProvince", typeof(string));

        var zipCodeParameter = zipCode.HasValue ?
            new ObjectParameter("ZipCode", zipCode) :
            new ObjectParameter("ZipCode", typeof(long));

        var birthDateParameter = birthDate.HasValue ?
            new ObjectParameter("BirthDate", birthDate) :
            new ObjectParameter("BirthDate", typeof(System.DateTime));

        var raceParameter = race != null ?
            new ObjectParameter("Race", race) :
            new ObjectParameter("Race", typeof(string));

        var marital_StatusParameter = marital_Status != null ?
            new ObjectParameter("Marital_Status", marital_Status) :
            new ObjectParameter("Marital_Status", typeof(string));

        var sSNParameter = sSN != null ?
            new ObjectParameter("SSN", sSN) :
            new ObjectParameter("SSN", typeof(string));

        var home_PhoneParameter = home_Phone.HasValue ?
            new ObjectParameter("Home_Phone", home_Phone) :
            new ObjectParameter("Home_Phone", typeof(long));

        var cell_PhoneParameter = cell_Phone.HasValue ?
            new ObjectParameter("Cell_Phone", cell_Phone) :
            new ObjectParameter("Cell_Phone", typeof(long));

        var employerParameter = employer != null ?
            new ObjectParameter("Employer", employer) :
            new ObjectParameter("Employer", typeof(string));

        var job_TitleParameter = job_Title != null ?
            new ObjectParameter("Job_Title", job_Title) :
            new ObjectParameter("Job_Title", typeof(string));

        var employerAddress1Parameter = employerAddress1 != null ?
            new ObjectParameter("EmployerAddress1", employerAddress1) :
            new ObjectParameter("EmployerAddress1", typeof(string));

        var employerAddress2Parameter = employerAddress2 != null ?
            new ObjectParameter("EmployerAddress2", employerAddress2) :
            new ObjectParameter("EmployerAddress2", typeof(string));

        var employerCityParameter = employerCity != null ?
            new ObjectParameter("EmployerCity", employerCity) :
            new ObjectParameter("EmployerCity", typeof(string));

        var employerStateParameter = employerState != null ?
            new ObjectParameter("EmployerState", employerState) :
            new ObjectParameter("EmployerState", typeof(string));

        var employerZipParameter = employerZip.HasValue ?
            new ObjectParameter("EmployerZip", employerZip) :
            new ObjectParameter("EmployerZip", typeof(long));

        var employer_PhoneParameter = employer_Phone.HasValue ?
            new ObjectParameter("Employer_Phone", employer_Phone) :
            new ObjectParameter("Employer_Phone", typeof(long));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertSpouseInfo", personIDParameter, first_NameParameter, middle_NameParameter, last_NameParameter, address1Parameter, address2Parameter, cityParameter, stateProvinceParameter, zipCodeParameter, birthDateParameter, raceParameter, marital_StatusParameter, sSNParameter, home_PhoneParameter, cell_PhoneParameter, employerParameter, job_TitleParameter, employerAddress1Parameter, employerAddress2Parameter, employerCityParameter, employerStateParameter, employerZipParameter, employer_PhoneParameter);
    }

    public virtual int usp_InsertTestPatient(string firstName, string middleName, string lastName)
    {
        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));

        var middleNameParameter = middleName != null ?
            new ObjectParameter("MiddleName", middleName) :
            new ObjectParameter("MiddleName", typeof(string));

        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertTestPatient", firstNameParameter, middleNameParameter, lastNameParameter);
    }

    public virtual ObjectResult<usp_PageLoadQuery_Result> usp_PageLoadQuery(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PageLoadQuery_Result>("usp_PageLoadQuery", personIDParameter);
    }

    public virtual int usp_UpdatePatientAccessHasProcessed(Nullable<int> personID)
    {
        var personIDParameter = personID.HasValue ?
            new ObjectParameter("PersonID", personID) :
            new ObjectParameter("PersonID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePatientAccessHasProcessed", personIDParameter);
    }
}
